////////////////////////////////////////////////////////////////////////////////
///  Shea M. Mosby
///  smosby@lanl.gov
///  Devin S. Connolly
///  dconnolly@lanl.gov
///  eventbuild_gammatest.cxx
////////////////////////////////////////////////////////////////////////////////

// C/C++ includes
#include <stdio.h>
#include <string.h>

// ROOT includes
#include "TTree.h"
#include "TFile.h"

// File includes
#include "waveform_processing.h"


int main(int argc,char *argv[])
{
  // Creation of variables section
  char ipath[512];
  char opath[512];
  char buf[512];

  printf("\n");
  printf(" _______________________________________________________\n");
  printf("|                                                       |\n");
  printf("|                  CAEN Event Building                  |\n");
  printf("|-------------------------------------------------------|\n");
  printf("|          Analyze DPP-enabled CAEN digital ouput       |\n");
  printf("|                                                       |\n");
  printf("|             (send bugs to smosby@lanl.gov)            |\n");
  printf("|_______________________________________________________|\n");
  printf("\n");
  // Parsing of input parameters
  if(argc == 3){
    sprintf(ipath,"%s",argv[1]);
    sprintf(opath,"%s",argv[2]);
  }
  else {
    printf("--> EXIT:\nPlease, start singles processing as follows: \n");
    printf("--> EXIT: singlesprocessing string=PATH_TO_FILE string=PATH_TO_OUTPUT\n");
    return -1;
  }
  // Get file / tree paths set
  TFile *ifile = new TFile(ipath);
  TFile *ofile = new TFile(opath,"recreate");
  TTree *otree[2];
  otree[0] = new TTree("et","event tree from waveform analysis");
  otree[1] = new TTree("etg","event tree from waveform analysis - gamma rays");

  // set up tree representing classes
  const Short_t board_ana = 0; // what board to be analyzing
  const Short_t channel_ana = 8; // number of channels to analyze
  TTree *itree[channel_ana];
  ProcessedRootEvent proc_evt[channel_ana];
  for (int i=0;i<channel_ana;++i)
    {
      sprintf(buf,"pt%i_%i",board_ana,i);
      itree[i] = (TTree*)ifile->Get(buf);
      proc_evt[i].reset();
      itree[i]->SetBranchAddress("ts",&proc_evt[i].ts);
      itree[i]->SetBranchAddress("t",&proc_evt[i].t);
      itree[i]->SetBranchAddress("peak",&proc_evt[i].peak);
      itree[i]->SetBranchAddress("baseline",&proc_evt[i].baseline);
    }
  EventInfo coinc_evt[2];
  GammaSingles gs_evt;
  // create branches
  cout << "about to make the tree\n";
  for (int i=0;i<1;++i)
    {
      coinc_evt[i].reset();
      otree[i]->Branch("t0t",&coinc_evt[i].t0t);
      otree[i]->Branch("ct",&coinc_evt[i].ct);
      otree[i]->Branch("dt",&coinc_evt[i].dt);
      otree[i]->Branch("cph",&coinc_evt[i].cph);
      otree[i]->Branch("aph[2]",coinc_evt[i].aph);
      otree[i]->Branch("gph[2]",coinc_evt[i].gph);
      otree[i]->Branch("ccoinc",&coinc_evt[i].ccoinc);
      otree[i]->Branch("gt[2]",coinc_evt[i].gt);
      otree[i]->Branch("ge[2]",coinc_evt[i].ge);
      otree[i]->Branch("gtl[10]",coinc_evt[i].gtl);
      otree[i]->Branch("gel[10]",coinc_evt[i].gel);
      otree[i]->Branch("gchl[10]",coinc_evt[i].gchl);
      otree[i]->Branch("gmult",&coinc_evt[i].gmult);
    }
  cout << "about to look at singles tree\n";
  gs_evt.reset();
  otree[1]->Branch("bnum",&gs_evt.bnum);
  otree[1]->Branch("chnum",&gs_evt.chnum);
  otree[1]->Branch("t0t",&gs_evt.t0t);
  otree[1]->Branch("dt",&gs_evt.dt);
  otree[1]->Branch("ge",&gs_evt.ge);
  otree[1]->Branch("baseline",&gs_evt.baseline);

  /////////////////////////////////////////////////
  // SET UP EVENT RECONSTRUCTION PARAMETERS HERE //
  /////////////////////////////////////////////////

  // General note, we're still working in dig units - sample rate is 4 ns
  // Also, we'll do the event reconstruction based on the trigger time tag
  // but tof based on everything
  // the written tof output will be in ns
  // also, remember we reconstruct relative to the macropulse right now
  // and finally, we've got 2 trees. The first one is for the TKE experiment
  // and the 2nd is for gamma rays that don't coincide with any fission event

  // event reconstruction offsets (dig units)
  Long64_t rt_offset[channel_ana];
  rt_offset[0] = 0; // t0
  rt_offset[1] = 0; // gamma detector 0
  rt_offset[2] = -250; // anode 0
  rt_offset[3] = -250; // anode 1
  rt_offset[4] = -25; // grid 0
  rt_offset[5] = -25; // grid 1
  rt_offset[6] = 0; // cathode
  rt_offset[7] = 0; // empty
  /*
    rt_offset[0] = 0; // gamma detector 0
    rt_offset[1] = 0; // gamma detector 1
    rt_offset[2] = 0; // t0
    rt_offset[3] = -250; // anode 0
    rt_offset[4] = -250; // anode 1
    rt_offset[5] = -25; // grid 0
    rt_offset[6] = -25; // grid 1
    rt_offset[7] = 0; // cathode
  */

  // reconstruction window (dig units, goes on either side)
  Long64_t recon_window = 250;

  Double_t dig2ns = 4.; // sample rate of the digitizer

  // time of flight calculation offsets (ns)
  Double_t tof_offset[channel_ana];
  tof_offset[0] = 0; // gamma detector 0
  tof_offset[1] = 0; // gamma detector 1
  tof_offset[2] = 0; // t0
  tof_offset[3] = 0; // anode 0
  tof_offset[4] = 0; // anode 1
  tof_offset[5] = 0; // grid 0
  tof_offset[6] = 0; // grid 1
  tof_offset[7] = 0; // cathode


  ULong64_t current_index[channel_ana];
  for (int i=0;i<channel_ana;++i)
    {
      current_index[i]=itree[i]->GetEntries()-1;
    }
  Int_t t0_channel = 0;
  Int_t cathode_channel = 6;

  /*
    const Int_t n_other_ic_channels = 5;
    Int_t other_ic_channels[n_other_ic_channels] = {2,3,4,5,1};
  */
  const Int_t n_other_ic_channels = 1;
  Int_t other_ic_channels[n_other_ic_channels] = {7};
  //Int_t other_ic_channels[n_other_ic_channels] = {3};

  ////////////////////////////////////////////////
  // END SET UP EVENT RECONSTRUCTION PARAMETERS //
  ////////////////////////////////////////////////
  // we reverse loop over everything for "simplicity"
  cout << "about to loop\n";
  for (int t0i=current_index[t0_channel];t0i>-1;--t0i)
    {
      if (t0i%1000==0) {cout << "\r" << "t0 index " << t0i;}
      itree[t0_channel]->GetEntry(t0i);
      //if (proc_evt[t0_channel].peak>-2500.) continue;
      if (proc_evt[t0_channel].peak>-500) continue;
      int cathode_i = current_index[cathode_channel];
      while (true) // this looks for fission events - cathode is the reference
        {
          if (cathode_i < 0) break;
          coinc_evt[0].reset();

          ////////////////////////////////////
          // CATHODE / T0 COINCIDENCE BLOCK //
          ////////////////////////////////////
          itree[cathode_channel]->GetEntry(cathode_i);
          // break out if we are less than the t0
          if (proc_evt[cathode_channel].ts+rt_offset[cathode_channel]<proc_evt[t0_channel].ts+rt_offset[t0_channel])
            {
              break;
            }
          //cout << "t0 time " << proc_evt[0].ts+rt_offset[0] << " cathode time " << proc_evt[cathode_channel].ts+rt_offset[cathode_channel] << " difference " <<  endl;
          // otherwise keep trying to reconstruct
          coinc_evt[0].t0t = dig2ns*((double)(proc_evt[t0_channel].ts + rt_offset[t0_channel]) + proc_evt[t0_channel].t) + tof_offset[t0_channel];
          coinc_evt[0].ct = dig2ns*((double)(proc_evt[cathode_channel].ts + rt_offset[cathode_channel]) + proc_evt[cathode_channel].t) + tof_offset[cathode_channel];
          coinc_evt[0].cph = proc_evt[cathode_channel].peak;
          coinc_evt[0].dt = coinc_evt[0].ct - coinc_evt[0].t0t;
          //coinc_evt[0].dt = proc_evt[cathode_channel].ts-proc_evt[t0_channel].ts;
          cathode_i -= 1;
          ///////////////////////
          // OTHER IC CHANNELS //
          ///////////////////////
          for (int ic_loop=0;ic_loop<n_other_ic_channels;++ic_loop)
            {
              int ic_channel = other_ic_channels[ic_loop];
              int ic_i = current_index[ic_channel];
              while (true)
                {
                  if (ic_i < 0) break;
                  itree[ic_channel]->GetEntry(ic_i);
                  // break out if we are less than low limit of coinc window
                  Long64_t ic_channel_time = proc_evt[ic_channel].ts+rt_offset[ic_channel];
                  Long64_t cathode_time = proc_evt[cathode_channel].ts+rt_offset[cathode_channel];
                  //cout << "channel " << ic_channel;
                  if (ic_channel_time<(cathode_time-recon_window))
                    {
                      break;
                    }
                  // continue on if we are greater than high limit of coinc window
                  else if (ic_channel_time>(cathode_time+recon_window))
                    {
                      switch (ic_channel)
                        {
                        case 1:
                          gs_evt.bnum = 0;
                          gs_evt.chnum = ic_channel;
                          gs_evt.chnum = ic_channel;
                          gs_evt.t0t = coinc_evt[0].t0t;
                          gs_evt.dt =  dig2ns*((double)(proc_evt[ic_channel].ts + rt_offset[ic_channel] + proc_evt[ic_channel].t + tof_offset[ic_channel])) - coinc_evt[0].t0t;
                          gs_evt.ge = proc_evt[ic_channel].peak;
                          otree[1]->Fill();
                          break;
                          /*
                            case 1:
                            gs_evt.bnum = 0;
                            gs_evt.chnum = ic_channel;
                            gs_evt.chnum = ic_channel;
                            gs_evt.t0t = coinc_evt[0].t0t;
                            gs_evt.dt =  dig2ns*((double)(proc_evt[ic_channel].ts + rt_offset[ic_channel] + proc_evt[ic_channel].t + tof_offset[ic_channel])) - coinc_evt[0].t0t;
                            gs_evt.ge = proc_evt[ic_channel].peak;
                            otree[1]->Fill();
                            break;
                          */
                        default:
                          break;

                        }
                      ic_i -= 1;
                      current_index[ic_channel] = ic_i;
                      continue;
                    }
                  // if we are inside the coinc window we actually do something
                  else
                    {
                      switch (ic_channel)
                        {
                        case 2:
                          coinc_evt[0].aph[0] = proc_evt[ic_channel].peak;
                          break;
                        case 3:
                          coinc_evt[0].aph[1] = proc_evt[ic_channel].peak;
                          break;
                        case 4:
                          coinc_evt[0].gph[0] = proc_evt[ic_channel].peak;
                          break;
                        case 5:
                          coinc_evt[0].gph[1] = proc_evt[ic_channel].peak;
                          break;
                        case 7:
                          //coinc_evt[0].gt[0] = dig2ns*(double)(proc_evt[ic_channel].ts + rt_offset[ic_channel]) - coinc_evt[0].ct;
                          coinc_evt[0].gt[0] = dig2ns*(double)(proc_evt[ic_channel].ts + rt_offset[ic_channel]+ proc_evt[ic_channel].t) - coinc_evt[0].ct;
                          coinc_evt[0].ge[0] = proc_evt[ic_channel].peak;
                          coinc_evt[0].gmult += 1;
                          break;
                          /*
                            case 1:
                            coinc_evt[0].gt[1] = dig2ns*(double)(proc_evt[ic_channel].ts + rt_offset[ic_channel]) - coinc_evt[0].ct;
                            coinc_evt[0].ge[1] = proc_evt[ic_channel].peak;
                            coinc_evt[0].gmult += 1;
                            break;
                          */
                        default:
                          break;
                        }
                    }
                  ic_i -= 1;
                  current_index[ic_channel] = ic_i;
                }
            }
          otree[0]->Fill();
          current_index[cathode_channel] = cathode_i;
        }
    }
  cout << endl;

  otree[0]->Write();
  otree[1]->Write();
  ofile->Close();
  ifile->Close();
  return 0;
}
